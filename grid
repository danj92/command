.grid {
  display: grid;
  width: 600px;
  grid-template-columns: 1fr 2fr 3fr;
}

.grid {
  display: grid;
  grid-template-columns: min-content 200px max-content;
}

.grid {
  display: grid;
  grid-template-columns: 200px minmax(100px, 300px) 200px;
}

.grid {
  display: grid;
  grid-template-columns: [first] 100px [main] 200px [right] 300px [right2] 150px [last];
}

.grid {
  display: grid;
  grid-template-columns: [first nav] 150px [main] 1fr [last];
  grid-template-rows: [first header] 50px [main] 1fr [footer] 50px [last];
}

.grid {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(250px, 1fr)) grid-template-columns: repeat(4, 250px);
  grid-template-rows: 250px 250px 250px 250px;
  grid-gap: 1rem;
  grid-column-gap: 20px;
  grid-row-gap: 1em;
}

.grid {
  display: grid;
  grid-template-columns: 90px 50px 120px 500px;
}

.grid {
  display: grid;
  grid-template-columns: 200px repeat(2, 1fr) 100px;
}

.grid {
  display: grid;
  grid-template-columns: repeat(2, 200px);
  grid-template-rows: repeat(4, 200px);
  grid-template-columns: repeat(4, 200px);
  grid-column-gap: 20px;
  grid-row-gap: 100px;

  grid-row-start: 2;
  grid-row-end: 3;
  grid-column-start: 2;
  grid-column-end: 3;
  grid-row: 2;
  grid-column: 3/4;
}

.grid {
  display: grid;
  grid-template-columns: 1fr 200px;
  grid-template-rows: 150px 1fr 100px;
  grid-template-areas:   "header header"

                         "content sidebar"

                         "footer footer";
} 

.grid {
  display: inline-grid;
  grid-template-columns: repeat(2, fit-content(1200px));
  grid-template-rows: 100px;
  grid-template-columns: 30px 60px;
  grid-auto-flow: column;
  grid-auto-columns: 1fr;
}

.grid-item1 {
  background: #4caf50;
  grid-row-start: header;
  grid-row-end: header;
  grid-column-start: header;
  grid-column-end: header;
  grid-row-start: 1;
  grid-row-end: 3; */
  grid-template-columns: 100px 100px 100px 100px;
  grid-area: title;
}

.grid-item2 {
  /* grid-column-start: -1;
  grid-column-end: -2;
  grid-row-start: 1;
  grid-row-end: 2; */
  background: #80d8ff;
  /* grid-area: nav; */
}

.grid-item3 {
  /* grid-column-start: 1;
  grid-column-end: 2; */
  background: #2600ff;
  /* grid-area: main; */
}

.grid-item4 {
  /* grid-column-start: 2;
  grid-column-end: 5; */
  background: yellow;
  /* grid-area: aside; */
}

.grid-item5 {
  /* grid-column-start: 1;
  grid-column-end: 6; */
  background: rgb(241, 0, 241);
  /* grid-area: footer; */
  /* grid-column: main / end; */
  /* grid-row: top / middle; */
}


/* .grid-item5 {
  background: rgb(241, 0, 241); */


/* grid-column: 2 / span 2; */


/* grid-column-start: 2;
  grid-column-end: 4;
  grid-row-start: 2;
  grid-row-end: 3;
} */


/* .grid-item5 {
  background: rgb(241, 0, 241);
  grid-column-start: -1;
  grid-column-end: -3;
  grid-row-start: -2;
  grid-row-end: -2;
} */


.grid-item6 {
  /* grid-row-start: row-start;
  grid-row-start: row-end;
  grid-column: col-start;
  grid-column: col-end; */

  background: rgb(241, 72, 72);
}

.container {
  display: grid;
  grid-template-columns: 1fr 1fr 1fr;
  grid-template-rows:  1fr 3fr;
  grid-row-gap: 5px;
  grid-column-gap: 5px;
}

//@media screen and (min-width: 320px) {
//  .container {
//    display: grid;
//    grid-template-columns: 1fr 1fr;
//    grid-row-gap: 5px;
//    grid-column-gap: 5px;
//  }
//
//}

.grid {
  display: grid;
  grid-template-columns: 300px 300px 300px;
  grid-template-rows: 200px 200px;
  grid-auto-rows: 100px;
  grid-row-gap: 20px;
  grid-column-gap: 20px;
  //grid-gap: 20px;
}

  grid-template-columns: 50px repeat(2, 100px 400px);
  // перша колонка 50px  1,2 -га колонка відповідно 100 і 400 . Ми повторюєм дві колумни по дві колонки

  grid-auto-rows: minmax(100px, auto);
  // всі рядки будуть мати ширину 100px по замовчуванню. А в інших колонках де це потрібно буде на auto

  grid-auto-flow: column;
  //нумерація колонок  по стопчиках з верху в низ 1.2.3
  grid-auto-flow: row;
  //нумерація колонок  по рядках

  grid-template-columns: repeat(auto-fill, minmax(150px, 300px));
  // як в бутстрапі колонки перекидуються якщо досягають 300 px

  grid-template-columns: repeat(auto-fill, minmax(150px, 1fr));
  // як в бутстрапі колонки перекидуються якщо досягають 300 px


  //grid-template-columns: repeat(auto-fill, minmax(150px, 1fr));
  // як в бутстрапі колонки перекидуються якщо досягають 300 px. лишається місце по правій стороні. І перескакує тоді коли
  //є менше ніж 150px

  //grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
  // розтягується на всю ширину і перескакує лиш тоді коли досягає мінімальної

    grid-column-start: 1;
    grid-column-end: 3;
    grid-column-end: -1;
    //grid-column: 1 / 3
  //  розтягує з першої лінії колонки до третьої 1

  .red:nth-child(1) {
    grid-column: 1 / 5;
    grid-row: 2;
  }

  justify-items: start;
  //НЕ розтягуються і приліплюються по ліву сторону

  align-items: center;

    align-self: start;
    // вирівнювання одиночного блоку



    justify-self: start;

    justify-self: center;


-------------------------------------
<div class="grid">
  <header>Шапка</header>
  <article>
    <h1>Заголовок</h1>
    <p> Lorem ipsum dolor sit amet, consectetur adipisicing elit. Deserunt, dicta! </p>
  </article>
  <aside>Сайтбар</aside>
  <footer>Подвал</footer>
</div>


.grid {
  display: grid;
  grid-gap: 20px;
  grid-template-areas:
        "header"
        "article"
        "aside"
        "footer"
;

}

header {
  grid-area: header;
  background: #28324E;
}

article {
  grid-area: article;
  background: #28324E;
}

aside {
  grid-area: aside;
  background: #28324E;
}

footer {
  grid-area: footer;
  background: #28324E;
}

@media (min-width: 640px) {
  .grid {
    grid-template-columns: 2fr 4fr;

    grid-template-areas:
    "header header"
    "aside article"
    "aside footer"

  }
}


  grid-template-columns: repeat(4, 1fr);
  grid-template-rows: repeat(3, 200px);
  grid-template: repeat(3, 200px) /  repeat(4, 1fr);

 toggleMenu(event: Event) {
    this.active = !this.active;
    event.stopPropagation();
  }
    <div class="menu" [class.active-menu]="active">

private eRef: ElementRef -  щоб відносився до цього елементу

this.eRef.nativeElement.contains(event.target) -  відноситься до цілого компоненту


width: fit-content; // найменша можлива відстань

minmax(150px, 1fr) //минимальный размер в 150px и максимум по оставшемуся месту

https://medium.com/@stasonmars/%D0%B2%D0%B5%CC%88%D1%80%D1%81%D1%82%D0%BA%D0%B0-%D0%BD%D0%B0-grid-
%D0%B2-css-%D0%BF%D0%BE%D0%BB%D0%BD%D0%BE%D0%B5-%D1%80%D1%83%D0%BA%D0%BE%D0%B2%D0%BE%D0%B4%D1%81%D1%82%D0%B2%D0%BE
-%D0%B8-%D1%81%D0%BF%D1%80%D0%B0%D0%B2%D0%BE%D1%87%D0%BD%D0%B8%D0%BA-220508316f8b

@mixin grid {
  @supports (display: grid) {
    display: grid;
  }
  @supports not (display: grid) {
    display: flex;
    flex-direction: column;
    > *:not(:last-child) {
      margin-bottom: 15px;
    }
  }
}


// wysota row nejawnych gridiw - tobto tyh jaki nezadani w display grid napryklad 4 row zadanych a 2 ni to  
// grid-auto-rows zapraciuje dla dwoch ostannich

  grid-template-rows: 60px 60px;
  grid-auto-rows: 100px;
  
  
 // w jaku storonu bude rosty nejawnyj grid (majemo 6 DIV) 2 div ne jawni grid-auto-flo defolt = row. Wkazujemo
 // szo nejawnyj grid maje rosty w storonu column ()
 //  выставляя column для grid-auto-flow вы изменяете поток грид элементов
  grid-template-rows: 60px 60px;
  grid-template-columns: 1fr 1fr;
  
  grid-auto-flow: column;
  grid-auto-columns: 400px;

// grid-auto-flow также есть опциональное значение dense
елементи все переставляються так щоб заповнити в міру всі дири по можливості

// mozywosti grid-template-rows
grid-template-rows: 50px 1fr 80px;
#item1 {
  grid-row-start: 1;
  grid-row-end: 2; // mozna ne wkazuwaty jakszo maje zajniaty odnu kolonku
}

grid-template-rows: [row1-start] 50px [row2-start] 1fr [row3-start] 80px [row3-end];
  #item1 {
    grid-row-start: row1-start;
    grid-row-end: row2-start; // mozna ne wkazuwaty on grid-row-end maje po difoltu [row3-end]
  }
  
// skoroczena wersia
  grid-template-rows: [row1-start] 50px [row2-start] 1fr [row3-start] 80px [row3-end];
  #item1 {
    grid-row: row1-start /  row2-start; // skoroczena wersia  grid-row: grid-row-start / grid-row-end;
  }


Неявные проименованные линии создаются всякий раз, когда вы создаете именные 
грид-области используя grid-template-areas(grid-template-rows, grid-template-colums) ??

Таким образом для каждой проименованной грид области header, будет создано четыре неявных линии. 
Две названы header-start и column-start в проименованной грид области и две названы header-end соответственно.

grid-template-areas:
“a a”
“b c”;

#a {
  grid-area: a;
}
#b {
  grid-area: b;
}
grid-area — это свойство является сокращением для для: grid-column grid-row

// znaczenia odynakowi tilky zapysani po riznomu

grid-column: 2; => grid-column: 2 / 3; => grid-column-start: 2; grid-column-end: 3; => skoroczeno grid-column-start: 2;

.grid > * { zastosuj dla wsich elementiw w classi .grid } // dekoratory css
