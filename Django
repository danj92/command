
_________________________TEST_________________________________
Orm - objeck relation maping (обєктно реляціоние отображение || перебразование )

// jak sszo szos minialy w modeli bary danych(tworytsia  plik z danymy)
▶ ./manage.py makemigrations

// pryminiajem ti zminy do bazy danych
▶ ./manage.py migrate 

// poigratsa z modelu (zachodym w konsol pythonq)
▶ ./manage.py shell

>>> from blog.models import Post
>>> pmy = Post(title='NewMy', slug='newMySlug' , body='my new body')

// zapysujem w bazu danych
>>> pmy.save()
>>> pmy.id
6
// pry sozdanije modeli django dodaje menedzera (baczymo wsi metody do cijeji modeli)
>>> dir(pmy)

// sozdajem Post czerez menedzer modeli (robyty save() zapys ne obowiazkowo - sam zapysuje)
>>> p3 = Post.objects.create(title="P3title", slug="P3slug", body='P3body')

// pokazaty wsi obiekty
>>> Post.objects.all()

//szob wernuty konkretnyj ekzemplar modeli (get - czustwitelnyj k registru)
>>> postTake = Post.objects.get(slug='newMySlug')
>>> postTake
<Post: Post object (6)>

// ne czustwitelnych k registru (__iexact = insensitive exact)
>>> postTake = Post.objects.get(slug__iexact='NewMySlug')
>>> postTake
<Post: Post object (6)>

// maje w sobi perekazanyj slug
>>> postTake = Post.objects.get(slug__contains='NewMySlug')
>>> postTake
<Post: Post object (6)>
// jakszo maje bilsze niz odyn obiekt z takoju samoju nazwoju "NewMySlug"
>>> postTake = Post.objects.filter(slug__contains='NewMySlug')

>>> Post.objects.values()
<QuerySet [{'id': 1, 'title': 'Lorem.......

// список объектов заданной Модели. QuerySet позволяет читать данные из 
// базы данных, фильтровать и изменять их порядок.
QuerySet


// run django console
backend/bin/run shell_plus
backend/bin/run makemigrations
backend/bin/run migrate

// u posta możet nie byt nikakich tegoa ce zabezpeczuje nas opcia w modeli: blank=True 
// swojstwo related_name='post' - mostik mezdu modelami
tags = models.ManyToManyField('Tag', blank=True, related_name='post')

// robota z modeliami w konsoli. Importujem wse
>>> from blog.models import *

// djangowa consola
./manage.py shell

// prowirka wsich polej modeli
>>> Post.objects.values()

// zmina wartosti slug
>>> post
<Post: New post>
>>> post.slug
'new-slug'
>>> post.slug = 'new-post'
>>> post.slug
'new-post'
>>> post.save()

// provirk apola na manyTomany
>>> post.tags
<django.db.models.fields.related_descriptors.create_forward_many_to_many_manager.<locals>.ManyRelatedManager object at 0x7f8300c3c7b8>

// peredajem ekzempliar klasa tag django_t
>>> django_t = Tag.objects.create(title='django', slug='django')
>>> post.tags.add(django_t)

// swiazanie tags and post
>>> post.tags.all()
<QuerySet [<Tag: django>]>
>>> django_t.post.all()
<QuerySet [<Post: New post>]>

// poriadok nasleduwanija w class
Post.mro()

// test nasleduwanija
>>> class Mixin:
	name = 'oleg'
>>> class Man:
	name = None

>>> class Human(Mixin, Man):
>>> pass
>>> a = Human
>>> a.name
'oleg'
// snacala iszem w Human patom Human a potom Man
// poriadok razreszenij modelej Class.mro()
>>> Human.mro()
[<class 'Human'>, <class 'Mixin'>, <class 'Man'>, <class 'object'>]

// jaki polia w class TagForm
>>> tf = TagForm()
<TagForm bound=False, valid=Unknown, fields=(title;slug)>

// posmotret spisok atrybutow
dir(tf)

// czy polzuwatel wyslal formu
>>> tf.is_bound
False
>>> tf.is_valid()
False
>>> tf.errors
{}

// zapowniajem danymy formu
>>> d = {'title': '', 'slug':''}
>>> tf = TagForm(d)
>>> tf.is_bound
True
>>> tf.errors
{'title': ['This field is required.'], 'slug': ['This field is required.']}

// zapowniujemo formu
>>> d = {'title': 'some title', 'slug': 'some-title'}
>>> tf = TagForm(d)
>>> tf.is_valid()
True
>>> tf.cleaned_data
{'title': 'some title', 'slug': 'some-title'}
>>> from blog.models import Tag
>>> tag = Tag(title=tf.cleaned_data['title'], slug=tf.cleaned_data['slug'] )
>>> tag = Tag(title=tf.cleaned_data['title'], slug=tf.cleaned_data['slug'] )
>>> tag
<Tag: some title>
>>> tag.save()
>>> tag.id
3




