// DONT INSTALL PACKAGE USE SUDO
Due to the way most Linux distributions are handling the Python 3 migration, Linux users using the system 
Python without creating a virtual environment first should replace the python command in this tutorial
with python3 and the pip command with pip3 --user. Do not run any of the commands in this tutorial with
sudo: if you get a permissions error, come back to the section on creating virtual environments, set one 
up, and then continue with the tutorial as writte

pip defaults to installing Python packages to a system directory (such as /usr/local/lib/python3.4).
This requires root access.--user makes pip install packages in your home directory instead, which
doesn't require any special privileges.


// update package - pered ustanowkoju proektu
▶ sudo apt-get update

// check all version python
ls -ls /usr/bin/python*

// prowiriajem jakyj python ustanowlenyj
python -V
python3 -V

// jakszo w waszomu python3 ne wbudowano pip todi robumo
▶ apt install python3-pip

// provirka versiji pip
▶ python3 -m pip --version
▶ pip3 --version

// ustanowka ostannioi versiji pip. Ustanowka pip iz pythona 
// tak jak uze w pytoni wona wbudowana
python3 -m pip install --user --upgrade pip
pip install --upgrade pip


// stworujem papku i  zachodymo w neji
mkdir dj && cd dj

// ustanowka wirtualnogo seregowyszcza
python3 -m pip install --user virtualenv

// provirka versiji virtualenva
▶ python3 -m virtualenv --version  

// создадим виртуальное окружение. Stworenia virtualenv z nazwoju venv.
// Second argument is the location to create the virtualenv
python3 -m venv venv

// zapusk wirtualnogo seredowyszcza abo wykluczenia (deactivate)
source venv/bin/activate

// install Django
pip3 install Django==2.1.5

// Upgrade Django -U or --upgrade
pip3 install -U Django

// create folder for app
mkdir app && cd app

// create project use django
django-admin startproject blogengine

// open this folder(dj/app/blogengine) in VScode 
code .

// robemo osobne prylorzenije(component). Powynni znachodytys w papci de je manage.py
▶ python manage.py startapp blog

// zapusk servera, z papky de je manage.py
▶ ./manage.py runserver

// widpalujem migracji
▶ ./manage.py migrate  




---------------------------------------------------------------------------------
// (venv) proviriajem jakyj pytnon wykorystowujetsisa bo po defoltu bez "env"
▶ which python
/home/danj/dj/env/bin/python

▶ where python
/home/danj/dj/env/bin/python
/usr/bin/python

// (venv) check installed package 
▶ pip3 freeze

// delete package but not dependency.If you wont all dependency install package name pip-autoremove
//  --yes  -it not ask as agane if we wont delete
▶ pip3 uninstall namePackage --yes

// Listing Packages
▶ pip list

// pokazaty jaki paczku mozna obnowyty
▶ pip list --outdated


// upgrading packages
▶ pip install --upgrade requests

// tworym spisok zawisimostej. Ce dopomoże lechko widpaluwaty projekt
▶ pip3 freeze > requirements.txt

// (venv) instalacja z konkretnogo pliku wsich zawisimostej
▶ pip install -r requirements.txt

// install linting
▶ python3 -m pip install --user pylint







// in ZSH autocomplete comand in pip use Tab use comand
▶ pip completion --zsh >> ~/.zprofile

// Installing packages.Installing specific version
pip install requests
pip install requests==2.18.4

// Installing from local archives
pip install requests-2.18.4.tar.gz

// Upgrading packages
pip install --upgrade requests

// Using requirements files
pip install -r requirements.txt

// Freezing dependencies
pip freeze

// (venv) deactivate virtualenv
deactivate

// install pip-autoremove
pip install pip-autoremove

// remove "requests" plus its dependencies:
pip-autoremove packageName -y



_______________________________________________
reinstall python3
sudo eopkg install --reinstall python3
apt install python3 --reinstall

sudo apt-get --reinstall install python3


$ sudo apt-get install python3-pip

sudo pip3 install --force-reinstall --upgrade pip
sudo pip install --force-reinstall --upgrade pip
